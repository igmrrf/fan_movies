{"version":3,"sources":["logo.svg","components/Header.js","components/Movie.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","errorMessage","reducer","state","action","movies","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,gHCW5BC,G,MARA,SAACC,GACf,OACC,4BAAQC,UAAU,cACjB,4BAAKD,EAAME,SCeCC,EAjBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACVC,EAA0B,QAAjBD,EAAME,OAHY,qGAGmCF,EAAME,OAC1E,OACC,yBAAKL,UAAU,SACd,4BAAKG,EAAMG,OACX,6BACC,yBACCC,MAAM,MACNC,IAAG,4BAAuBL,EAAMG,OAChCG,IAAKL,KAGP,+BAAKD,EAAMO,KAAX,OCmBYC,EAjCA,SAACZ,GAAW,IAAD,EACaa,mBAAS,IADtB,mBAClBC,EADkB,KACLC,EADK,KAiBzB,OACC,0BAAMd,UAAU,UACf,2BACCe,MAAOF,EACPG,SAlB8B,SAACC,GACjCH,EAAeG,EAAEC,OAAOH,QAkBtBI,KAAK,SAEN,2BACCC,QAdwB,SAACH,GAC3BA,EAAEI,iBACFtB,EAAMuB,OAAOT,GALbC,EAAe,KAkBbK,KAAK,SACLJ,MAAM,a,+jBCrBV,IAGMQ,EAAe,CACnBC,SAAS,EACTrB,MAAO,GACPsB,aAAc,MAIVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOT,MACb,IAAK,wBACH,OAAO,EAAP,GACKQ,EADL,CAEEH,SAAS,EACTC,aAAc,OAElB,IAAK,wBACH,OAAO,EAAP,GACKE,EADL,CAEEH,SAAS,EACTK,OAAQD,EAAOE,UAEnB,IAAK,wBACH,OAAO,EAAP,GACKH,EADL,CAEEH,SAAS,EACTK,OAAQD,EAAOG,QAEnB,QACE,OAAOJ,IAiEEK,EA9DH,WAAO,IAAD,EACUC,qBAAWP,EAASH,GAD9B,mBACTI,EADS,KACFO,EADE,KAGdC,qBAAU,WACRC,MAtCgB,kDAuCbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAENN,EAAS,CACPf,KAAM,wBACNW,QAASU,EAAa7B,cAGzB,IAEH,IAsBQkB,EAAkCF,EAAlCE,OAAQJ,EAA0BE,EAA1BF,aAAcD,EAAYG,EAAZH,QAEhC,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,eACb,kBAAC,EAAD,CAAQqB,OA3BK,SAAAT,GACbqB,EAAS,CACPf,KAAM,0BAGRiB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACFwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACyB,SAA1BA,EAAaC,SACdP,EAAS,CACPf,KAAM,wBACNW,QAASU,EAAa7B,SAGxBuB,EAAS,CACPf,KAAM,wBACNY,MAAOS,EAAaE,cAY5B,uBAAG1C,UAAU,aAAb,yCAGA,yBAAKA,UAAU,UACZwB,IAAYC,EACX,4CACIA,EACF,yBAAKzB,UAAU,gBAAgByB,GAE/BI,EAAOc,KAAI,SAACxC,EAAOyC,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAczC,EAAMG,OAASH,MAAOA,UCnFxC2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.e9e2413a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\n\r\nconst Header = (props) => {\r\n\treturn (\r\n\t\t<header className=\"App-header\">\r\n\t\t\t<h2>{props.text}</h2>\r\n\t\t</header>\r\n\t)\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE = \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\nconst Movie = ({ movie }) => {\r\n\tconst poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n\treturn (\r\n\t\t<div className=\"movie\">\r\n\t\t\t<h2>{movie.Title}</h2>\r\n\t\t\t<div>\r\n\t\t\t\t<img \r\n\t\t\t\t\twidth=\"200\"\r\n\t\t\t\t\talt={`The movie titled: ${movie.Title}`}\r\n\t\t\t\t\tsrc={poster}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<p>({movie.Year})</p>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Movie;","import React, { useState } from \"react\";\r\n\r\nconst Search = (props) => {\r\n\tconst [searchValue, setSearchValue] = useState(\"\");\r\n\r\n\tconst handleSearchInputChanges = (e) => {\r\n\t\tsetSearchValue(e.target.value);\r\n\t}\r\n\r\n\tconst resetInputField = () => {\r\n\t\tsetSearchValue(\"\");\r\n\t}\r\n\r\n\tconst callSearchFunction = (e) => {\r\n\t\te.preventDefault();\r\n\t\tprops.search(searchValue);\r\n\t\tresetInputField();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className=\"search\">\r\n\t\t\t<input \r\n\t\t\t\tvalue={searchValue}\r\n\t\t\t\tonChange={handleSearchInputChanges}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\tonClick={callSearchFunction}\r\n\t\t\t\ttype=\"submit\"\r\n\t\t\t\tvalue=\"SEARCH\"\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n};\r\n\r\nexport default Search;","import React, { useReducer, useEffect } from 'react';\nimport logo from './logo.svg';\nimport Header from './components/Header';\nimport Movie from './components/Movie';\nimport Search from './components/Search';\nimport './App.css';\n\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\n\nconst initialState = {\n  loading: true,\n  movie: [],\n  errorMessage: null\n  //Help a mate out\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.error\n      };\n    default:\n      return state;\n  }\n};\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  \n    useEffect(() => {\n      fetch(MOVIE_API_URL)\n        .then(response => response.json())\n        .then(jsonResponse => {\n\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n    }, []);\n\n    const search = searchValue => {\n      dispatch({\n        type: \"SEARCH_MOVIES_REQUEST\"\n      });\n\n      fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n        .then(response => response.json())\n        .then(jsonResponse => {\n          if(jsonResponse.Response === \"True\") {\n            dispatch({\n              type: \"SEARCH_MOVIES_SUCCESS\",\n              payload: jsonResponse.Search\n            });\n          }else {\n            dispatch({\n              type: \"SEARCH_MOVIES_FAILURE\",\n              error: jsonResponse.Error\n            });\n          }\n        });\n    };\n\n    const { movies, errorMessage, loading } = state;\n\n  return (\n    <div className=\"App\">\n      <Header text=\"FAN MOVIES\" />\n      <Search search={search} />\n      <p className=\"App-intro\">\n        Sharing a few of our favourite movies\n      </p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading...</span>\n          ) : errorMessage ? (\n            <div className=\"errorMessage\">{errorMessage}</div>\n          ) : (\n            movies.map((movie, index) => (\n              <Movie key={`${index}-${movie.Title}`} movie={movie} />\n\n            ))\n          )}\n        </div>\n      </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}